name: CI/CD Pipeline for TemanDifa Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18.x"] # Sesuaikan versi Node.js
        python-version: ["3.9"] # Sesuaikan versi Python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install Node.js Dependencies
        run: npm ci

      - name: Audit NPM dependencies
        run: npm audit --audit-level=high

      - name: Run Node.js Tests
        run: npm test

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "**/requirements.txt"

      - name: Install Python Base Dependencies & Testing Tools
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          # Install base dan testing tools dulu
          pip install -r base/requirements.txt
          pip install pytest pytest-mock flake8

      - name: Install Service Specific Python Dependencies
        run: |
          source venv/bin/activate
          pip install -r yolo_detector/requirements.txt
          pip install -r voice_transcriber/requirements.txt
          pip install -r ocr_service/requirements.txt

      - name: Install pip-audit
        run: |
          source venv/bin/activate
          pip install pip-audit

      - name: Audit Python Dependencies - Base
        run: |
          source venv/bin/activate
          pip-audit -r base/requirements.txt

      - name: Audit Python Dependencies - YOLO Detector
        run: |
          source venv/bin/activate
          pip-audit -r yolo_detector/requirements.txt

      - name: Audit Python Dependencies - OCR Service
        run: |
          source venv/bin/activate
          pip-audit -r ocr_service/requirements.txt

      - name: Audit Python Dependencies - Voice Transcriber
        run: |
          source venv/bin/activate
          pip-audit -r voice_transcriber/requirements.txt

      - name: Run Python Linters and Tests
        run: |
          source venv/bin/activate
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          pytest

  build-scan-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-gateway:latest

      - name: Build and push YOLO Detector
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./yolo_detector/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-yolo:latest

      - name: Build and push Voice Transcriber
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./voice_transcriber/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-transcriber:latest

      - name: Build and push OCR Service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./ocr_service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-ocr:latest

      - name: Set up Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          ignore-unfixed: true
          format: "table"
          exit-code: "1"
          severity: "HIGH,CRITICAL"
          image-ref: |
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-gateway:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-yolo:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-transcriber:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-ocr:latest

  deploy:
    needs: build-scan-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd ~/temandifa-backend
            docker-compose pull
            docker-compose up -d --remove-orphans
            echo "Deployment successful!"
