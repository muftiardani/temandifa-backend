name: CI/CD Pipeline for TemanDifa Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18.x"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install Node.js Dependencies
        run: npm ci

      - name: Audit NPM dependencies
        run: npm audit --audit-level=high

      - name: Run Node.js Tests
        run: npm test

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
        service: [yolo-detector, voice-transcriber, ocr-service]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "**/requirements.txt"

      - name: Install Python Dependencies (Isolated)
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip

          # 1. Install dependensi base
          pip install -r base/requirements.txt

          # 2. Install dependensi spesifik layanan (terisolasi)
          echo "Installing dependencies for ${{ matrix.service }}"
          pip install -r ${{ matrix.service }}/requirements.txt

          # 3. Install alat tes
          pip install pytest pytest-mock flake8 pip-audit

      - name: Audit Python Dependencies (Isolated)
        run: |
          source venv/bin/activate
          echo "Auditing dependencies for ${{ matrix.service }}"
          pip-audit -r ${{ matrix.service }}/requirements.txt

      - name: Run Python Linters and Tests (Isolated)
        run: |
          source venv/bin/activate
          # Jalankan pytest hanya untuk direktori layanan yang relevan
          echo "Running tests for ${{ matrix.service }}"
          pytest ${{ matrix.service }}/

  build-scan-and-push:
    runs-on: ubuntu-latest
    needs: [test-node, test-python]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Python Base Image
        uses: docker/build-push-action@v4
        with:
          context: ./base
          file: ./base/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-python-base:latest # Pastikan tag ini

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-gateway:latest

      - name: Build and push YOLO Detector
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./yolo_detector/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-yolo:latest

      - name: Build and push Voice Transcriber
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./voice_transcriber/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-transcriber:latest

      - name: Build and push OCR Service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./ocr_service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-ocr:latest

      - name: Set up Trivy and Scan Images
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          ignore-unfixed: true
          format: "table"
          exit-code: "1"
          severity: "HIGH,CRITICAL"
          image-ref: |
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-python-base:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-gateway:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-yolo:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-transcriber:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/temandifa-ocr:latest

  deploy:
    needs: build-scan-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd ~/temandifa-backend
            docker-compose pull
            docker-compose up -d --remove-orphans
            echo "Deployment successful!"
